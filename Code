#include<conio.h>
#include<stdio.h>
int cur[5][5], maxclaim[5][5], available[5];
int alloc[5] = { 0, 0, 0, 0, 0 };

int maxres[5], running[5], safe = 0;
int counter = 0, i, j, exec, resources, processes, k = 1;
int main()
{
  printf("\nEnter number of processes: ");
  scanf("%d", &processes);
  for(i = 0; i < processes; i++)
    {
      running[i] = 1;
      counter++;
    }
  printf("\nEnter number of resources: ");
  scanf("%d", &resources);
  printf("\nEnter Claim Vector:");
  for(i = 0; i < resources; i++)
    {
      scanf("%d", &maxres[i]);
    }
  printf("\nEnter Allocated Resource Table:\n");
  for(i = 0; i < processes; i++)
    {
      for(j = 0; j < resources; j++)
	{
	  scanf("%d", &cur[i][j]);
	}
    }
  printf("\nEnter Maximum Claim Table:\n");
  for(i = 0; i < processes; i++)
    {
      for(j = 0; j < resources; j++)
	{
	  scanf("%d", &maxclaim[i][j]);
	}
    }
  printf("\nThe Claim Vector is: ");
  for(i = 0; i < resources; i++)
    {
      printf("\t%d", maxres[i]);
    }
  printf("\nThe Allocated Resource Table:\n");
  for(i = 0; i < processes; i++)
    {
      for(j = 0; j < resources; j++)
	{
	  printf("\t%d", cur[i][j]);
	}
      printf("\n");
    }
  printf("\nThe Maximum Claim Table:\n");
  for(i = 0; i < processes; i++)
    {
      for(j = 0; j < resources; j++)
	{
	  printf("\t%d", maxclaim[i][j]);
	}
      printf("\n");
    }
  for(i = 0; i < processes; i++)
    {
      for(j = 0; j < resources; j++)
	{
	  allocn[j] += cur[i][j];
	}
    }
  printf("\nAllocated resources:");
  for(i = 0; i < resources; i++)
    {
      printf("\t%d", alloc[i]);
    }
  for(i = 0; i < resources; i++)
    {
      available[i] = maxres[i] - alloc[i];
    }
  printf("\nAvailable resources:");
  for(i = 0; i < resources; i++)
    {
      printf("\t%d", available[i]);
    }
  printf("\n");
  while(counter != 0)
    {
      safe = 0;
      for(i = 0; i < processes; i++)
	{
	  if(running[i])
	    {
	      exec = 1;
	      for(j = 0; j < resources; j++)
		{
		  if(maxclaim[i][j] - cur[i][j] > available[j])
		    {
		      exec = 0;
		      break;
		    }
		}
	      if(exec)
		{
		  printf("\nProcess%d is executing\n", i + 1);
		  running[i] = 0;
		  counter--;
		  safe = 1;
		  for(j = 0; j < resources; j++)
		    {
		      available[j] += cur[i][j];
		    }
		  break;
		}
	    }
	}
      if(!safe)
	{
	  printf("\nThe processes are in unsafe state.\n");
	  break;
	}
      else
	{
	  printf("\nThe process is in safe state");
	  printf("\nAvailable vector:");
	  for(i = 0; i < resources; i++)
	    {
	      printf("\t%d", available[i]);
	    }
	  printf("\n");
	}
    }
  return 0;
}
